import { TalkieStream, parseHexString, type TalkieDeviceType } from './talkieStream';

// Sample phrases from the Talkie library
const SAMPLE_PHRASES = {
  'WHAT IS THY BIDDING':
    '0x41,0x89,0xaa,0x32,0x3c,0x2a,0x1F,0x25,0xea,0xee,0x10,0x8d,0x73,0xe6,0x64,0x66,0x5c,0xac,0xc9,0x99,0xb3,0x9d,0x51,0x89,0xb4,0x67,0x4e,0x7e,0x5a,0x35,0x6b,0xaF,0x35,0xa9,0x8a,0x12,0x73,0xd2,0xd6,0xa2,0x2b,0xd5,0xdc,0x76,0x6a,0xb3,0x9F,0x92,0xc8,0x38,0xa9,0x2d,0x6e,0xda,0xc2,0x64,0x8F,0xb6,0xba,0x96,0x0e,0x8F,0xbc,0xda,0xa4,0x9d,0xaa,0xb2,0xca,0xd9,0x8b,0x32,0x6a,0xcF,0xd9,0x67,0xcF,0xd2,0x69,0x3c,0x67,0x9F,0x23,0xab,0xa0,0xc8,0xac,0x7d,0xae,0xa2,0x82,0xdd,0xa3,0xF6,0xba,0x8a,0x0a,0x51,0xcF,0x26,0xa3,0x69,0xca,0xd5,0xc4,0x92,0x8c,0xa6,0xbb,0x34,0x15,0x4d,0x3c,0xe2,0xae,0xdd,0x5c,0xcd,0x71,0x8a,0x8b,0xe9,0x20,0x31,0x27,0x2e,0x2e,0xb6,0x5d,0x54,0x55,0x43,0x8a,0xab,0x6b,0xab,0x70,0xdb,0xa9,0xad,0xb6,0x2c,0xc2,0x95,0x9c,0x36,0x9b,0x2e,0x8e,0xaa,0x72,0x8e,0xe4,0xa6,0xd4,0x33,0xF6,0x39,0x93,0xeb,0xd0,0xac,0xc8,0xe7,0x2a,0xb6,0x34,0x32,0x6b,0x9F,0xab,0xb9,0xa4,0x8a,0xa8,0x7c,0xae,0xe6,0x02,0x3a,0x32,0xF6,0xb9,0x9a,0x76,0x48,0xaF,0x3a,0xe7,0xaa,0xc2,0xa8,0x23,0xeb,0x8e,0x2b,0x09,0x97,0x89,0x48,0x92,0xFa,0xa4,0x53,0xd4,0x3c,0x49,0x5a,0xb2,0x29,0x67,0x73,0xdb,0x61,0xc9,0xb6,0x8c,0xcd,0x93,0x00,0x38,0xaa,0x98,0x14,0x73,0x4F,0x72,0x8e,0x2c,0x4c,0x26,0xb3,0xF1,0x39,0x8a,0x30,0x9a,0xa8,0xda,0xe7,0xc8,0xc2,0xb8,0xb3,0xaa,0x8c,0x23,0x2b,0x97,0xF0,0x88,0x93,0x8e,0xa8,0x53,0xd5,0x3c,0xcd,0x39,0x9a,0x6d,0xcF,0x4c,0x5a,0xeb,0xa8,0xd2,0x28,0xbc,0xe2,0x9c,0xa3,0x0a,0xe5,0x88,0x5a,0x7a,0xae,0xcc,0x54,0xa6,0xba,0xcd,0xb9,0x33,0x57,0x99,0xee,0x34,0xe7,0xce,0x4c,0x65,0xab,0x92,0xac,0xb7,0x72,0xe1,0xae,0x4a,0xb2,0xde,0x26,0x04,0x27,0xbd,0xc9,0x7a,0x2b,0x57,0xda,0xF4,0x34,0xe3,0x09,0x2c,0x6d,0x32,0x6a,0x8F,0x27,0xF0,0xd4,0x75,0x6F,0x32,0x9e,0xc0,0xc3,0x26,0xbc,0x49,0x7b,0x02,0x0b,0xdd,0x88,0x25,0xed,0x0e,0x3c,0x6d,0xc3,0x9b,0xb4,0x3b,0xF0,0xb4,0x35,0x6F,0xd3,0xee,0xc0,0xd3,0x36,0xbc,0x4e,0xb9,0x03,0x0F,0x5b,0xF7,0x25,0xed,0x0e,0x3c,0xad,0xcd,0xdb,0x94,0x3b,0xF2,0xd0,0xF1,0xa8,0x53,0xee,0x20,0x52,0xdb,0xa2,0x4d,0xb9,0x02,0x4F,0x6d,0xF3,0x26,0xe5,0x0a,0x3c,0xb4,0x3d,0x9a,0xa4,0x3b,0xca,0x54,0x57,0x6F,0x12,0xee,0xa8,0x52,0x42,0xa3,0x4d,0xba,0xa3,0x4c,0x75,0x8d,0xd6,0xe9,0x4e,0x2a,0x55,0xc5,0xFb,0x84,0x3b,0xaa,0x54,0xd7,0x68,0x9d,0xee,0x28,0x53,0xc3,0xb3,0x49,0xba,0x03,0x4F,0x5b,0xF3,0x36,0xe9,0x8e,0x22,0x2d,0x2c,0xba,0xa4,0x27,0xF2,0xd0,0xF2,0x68,0x12,0x9e,0xa4,0x53,0x45,0x23,0x0b,0x00,0xc0,0x03',
  'HASTA LA VISTA':
    '0x0e,0xe0,0x3e,0x62,0x6d,0xc9,0x78,0xa8,0x89,0xed,0xd5,0x27,0xe9,0xae,0x61,0x71,0x03,0x00,0x6a,0x45,0x00,0x40,0x72,0x2F,0x80,0xa9,0x6c,0x0d,0xF0,0x55,0xe2,0x34,0xa9,0x47,0x68,0x65,0xed,0xd3,0xa4,0x9a,0x61,0xe5,0x8b,0x4F,0x93,0x7a,0x98,0x77,0x2c,0x3e,0x4d,0x6e,0x9e,0x52,0xd9,0xF8,0xb4,0x39,0x44,0x9a,0x67,0x95,0x00,0xF0,0x10,0x9e,0x00,0x62,0x3c,0x12,0x00,0x65,0x67,0x02,0xb4,0xec,0x48,0x00,0x94,0x11,0x2b,0xc9,0x22,0xd2,0x82,0x2d,0xad,0x24,0x4b,0x0d,0x0d,0x4d,0xec,0x00,0xec,0x33,0x1d,0x00,0x5c,0xc6,0x0a,0xaa,0x36,0xd7,0x50,0x3b,0xc7,0x8F,0x4a,0x2b,0xc2,0xeb,0x9c,0x2c,0x6b,0x0b,0x77,0x9b,0x73,0xea,0x94,0xcc,0x28,0xb3,0x76,0x02,0x50,0x0F,0x73,0x00,0x68,0xe1,0x0e,0x80,0x35,0x3d,0x00,0xbc,0xb2,0x9d,0x3e,0x56,0x33,0xa9,0xaa,0x73,0xFa,0x54,0xdc,0x29,0xa2,0xF6,0x19,0x62,0x0c,0xa3,0xca,0xc6,0xab,0x08,0xde,0xdd,0x3c,0x66,0x1b,0x00,0xe6,0x74,0x07,0x80,0x92,0x69,0x00,0x90,0x2b,0x57,0x9F,0x2c,0xbb,0x55,0x34,0x39,0x7d,0xd6,0x1c,0x3e,0x11,0xFb,0x74,0x41,0x6a,0xc6,0x78,0xe4,0xd5,0x17,0x45,0xe1,0x13,0xb1,0xcF,0x90,0x94,0x44,0x94,0x27,0x39,0x43,0x91,0x6a,0x5a,0x3e,0x33,0x00,0x40,0x66,0x26,0x40,0x93,0xc8,0x04,0x30,0x5e,0x15,0x00,0xc6,0xb3,0x1c,0x00,0x4c,0x47,0x00,0x40,0xa8,0x70,0x00,0x48,0x15,0x06,0xc0,0x31,0xc3,0x00,0xc0,0x67,0x38,0x00,0x7a,0xF7,0x00,0xe0,0xe6,0x71,0x86,0xe0,0x22,0xad,0xb2,0xd2,0x1a,0x82,0x8b,0x88,0x8a,0x5a,0x6b,0xc9,0xc6,0xc3,0x42,0x1b,0x3b,0x00,0x65,0x77,0x07,0x80,0x10,0x65,0x00,0x92,0x22,0x1c,0x20,0x8d,0xa5,0x03,0x98,0x33,0x33,0x00,0xb4,0xe1,0x06,0x00,0x31,0xd3,0x00,0x20,0x54,0xb5,0x2e,0x33,0x49,0x4b,0x8F,0x33,0x96,0x22,0x34,0x24,0xdc,0x8a,0x01,0x80,0x8F,0x30,0x00,0xF0,0x95,0x0a,0xc0,0xbd,0xca,0x00,0x20,0x67,0xb5,0x26,0x4a,0xc9,0x4c,0x4d,0xd2,0x9a,0xcc,0x35,0xcc,0x3d,0x6e,0x9b,0x32,0xb3,0xF0,0xb0,0x38,0x2d,0xcb,0x42,0xc2,0x52,0x6d,0xb7,0x2c,0x73,0x73,0xcb,0x48,0xda,0xca,0xc2,0x24,0x2c,0xb4,0x6e,0x2b,0x33,0x97,0x8c,0xF4,0x38,0x2d,0x2b,0x4c,0x43,0xc2,0xe3,0x2a,0x00,0xb8,0x2a,0x05,0x80,0x54,0xa1,0x00,0x10,0x32,0x1d,0x80,0x9c,0xd4,0xa9,0x6b,0x66,0x97,0x8c,0xb9,0xa7,0xae,0x99,0x5d,0x2a,0x97,0x9e,0xb6,0x15,0x76,0x8d,0x9c,0x7a,0x86,0x12,0x28,0xa2,0x6b,0x4a,0x01,0xa2,0xa5,0x0a,0x80,0xF4,0x3e,0x01,0x90,0xd6,0x66,0x8d,0x55,0x61,0x46,0x67,0xd4,0x35,0x66,0xc9,0x19,0x13,0x93,0xdb,0x98,0xa5,0xba,0x76,0x26,0x69,0x5b,0xd5,0x6a,0x14,0x11,0x47,0x00,0xc0,0x66,0x29,0x00,0x78,0xeb,0x33,0x55,0xcF,0xaa,0x1d,0xb3,0xd7,0x5c,0x2d,0xb9,0x74,0x57,0x5d,0x53,0x31,0x64,0x3a,0x55,0x65,0x2d,0xcd,0xb1,0x4a,0xe7,0xd4,0xb5,0x14,0x4d,0x11,0x53,0x55,0xd7,0x9a,0x0d,0xb9,0x6F,0x55,0x19,0x5b,0x52,0x12,0xb9,0x59,0xd6,0x01,0xcc,0x7b,0x3b,0x80,0x2b,0x6b,0x03,0x00,0xa9,0x6d,0x00,0xa4,0xbc,0x0c,0xc0,0xb4,0xa7,0x02,0xa0,0xF1,0x54,0x00,0xd0,0x11,0x02,0x80,0xce,0x43,0x01,0xc0,0x66,0x29,0x00,0xb8,0x4c,0x01,0x00,0x9F,0xa5,0x00,0xe0,0x23,0x05,0x00,0x9c,0xa7,0x00,0x80,0x8b,0x12,0x00,0x30,0x9e,0x02,0x00,0x36,0x12,0x08,0xdd,0x65,0x98,0x9b,0xd9,0x7e',
  'HMMM BEER':
    '0x00,0x50,0x9a,0x42,0xc2,0x5c,0xc3,0xc9,0xe8,0x1a,0x53,0x35,0x73,0x27,0xa5,0x8F,0xcc,0x3c,0x3c,0x12,0xa5,0xde,0x2b,0x0b,0x77,0x73,0xd3,0xFa,0x44,0xcd,0xc3,0xc2,0x71,0xeb,0x32,0x51,0x0F,0x0F,0x27,0xad,0x4b,0x2c,0xcc,0xdc,0x9d,0x94,0xd6,0x2b,0x4b,0x0d,0x77,0xdc,0x9a,0x20,0x3c,0xd4,0x22,0xF6,0x68,0x32,0x93,0x48,0x09,0x27,0xa3,0xc9,0x9c,0xc3,0xdc,0x6d,0xb7,0x26,0x73,0x6a,0x49,0x8d,0x3b,0x9a,0x2a,0xb0,0x3c,0xdc,0xce,0x6a,0x9a,0xc4,0x74,0x77,0x3b,0xab,0x69,0x02,0xd3,0xdd,0xec,0x8c,0xa6,0x08,0x2a,0x8d,0xb0,0x33,0x9a,0x22,0xa8,0x34,0x5c,0xc9,0x6a,0x9a,0x20,0x4b,0x77,0xbb,0xab,0xa9,0x9c,0xd2,0xdd,0x9d,0x8c,0x26,0x71,0x2e,0x4d,0xb7,0xdb,0xea,0xc4,0xb9,0x2d,0xdc,0xc9,0x68,0x32,0xe3,0x4a,0x73,0x27,0xa3,0x49,0x4c,0x32,0x25,0x1c,0xb7,0x26,0x08,0x2d,0x73,0x73,0xdb,0x1a,0x2F,0x2d,0x2d,0xc2,0x49,0x6b,0x02,0x09,0x0F,0x0F,0x3b,0xad,0x09,0x2c,0x3c,0x2c,0x1c,0x97,0xc6,0xc8,0x88,0x74,0x77,0x5d,0x5a,0xa5,0x2d,0x22,0x22,0x49,0x69,0x03,0xF1,0x28,0x8F,0xc4,0xad,0x8b,0xd4,0xc2,0x23,0xe3,0x8c,0xae,0x50,0x53,0xF3,0x70,0x92,0x3a,0x23,0x2d,0xbc,0x3c,0x4e,0xe9,0x23,0x35,0xcb,0x8c,0x38,0xa5,0x2F,0xc4,0x38,0x3d,0x92,0x94,0x21,0x51,0xd3,0xca,0x88,0x5d,0xc6,0x24,0xc4,0xdd,0x3c,0x71,0x19,0x92,0x50,0x09,0x0F,0xd5,0x6d,0xac,0xd4,0x55,0xdc,0x1d,0x97,0xb1,0x10,0xd1,0x34,0x77,0x95,0xc6,0x24,0xc4,0xd5,0x3d,0x4e,0x9a,0x0a,0x13,0x31,0x0d,0x3b,0x65,0xea,0x5c,0x59,0xd4,0x1c,0xa7,0xa9,0x52,0x13,0x35,0xb7,0x9d,0xe6,0x2c,0xd5,0xd4,0x4c,0x71,0x9a,0xab,0x70,0x16,0x31,0xc5,0x65,0xea,0xc2,0xcd,0xdc,0xe5,0x08,0x40,0x49,0x37,0x05,0x04,0x2b,0xd6,0xda,0x24,0xd5,0x62,0x22,0xce,0xea,0x1a,0x67,0xb3,0xae,0x5a,0xa7,0x1b,0x9a,0x8d,0x2b,0x67,0x9F,0xae,0x3b,0x36,0xaa,0xae,0x7d,0xda,0xee,0xc8,0xa9,0xbb,0xF6,0x69,0x47,0x64,0x23,0x9F,0x56,0xa7,0x1d,0x85,0x0d,0xbd,0x5b,0x9F,0x76,0x64,0x36,0xac,0x6e,0x7c,0xda,0x5e,0xd8,0xb0,0x6b,0xF6,0x69,0x47,0x13,0xc3,0xa8,0xd6,0xa7,0x1d,0xc3,0x1c,0x35,0x5b,0x9F,0xb6,0x0F,0x35,0x88,0xec,0x7c,0xda,0x3e,0xc4,0x28,0xb3,0xc9,0x69,0xFb,0x50,0x07,0x8F,0xd6,0xa7,0x1b,0xc3,0x1d,0xc5,0xbb,0x9c,0xae,0x4F,0x73,0xb0,0x68,0x73,0xba,0x3e,0xd8,0x30,0x63,0xce,0xe9,0xFa,0x14,0x25,0x8F,0x25,0xa7,0xeb,0xd3,0x94,0xcd,0xd6,0x9c,0xae,0x4F,0x55,0x72,0x5F,0xbd,0xba,0x36,0xc9,0x38,0xb3,0xd1,0xe9,0xda,0x10,0x51,0xb7,0x39,0xa7,0x6F,0x43,0x44,0xdd,0x5b,0x9F,0xbe,0x75,0x16,0x8d,0xe8,0x3c,0xFa,0x52,0xd0,0x22,0xb3,0x51,0xeb,0x4b,0x42,0xaF,0xc8,0x9a,0xa3,0x2F,0x91,0x24,0x3a,0x52,0x8d,0x3e,0x5b,0xe1,0xec,0x4c,0xdc,0x86,0x64,0x54,0xb3,0xcb,0x76,0x19,0x93,0x23,0xcb,0xF6,0x58,0x65,0x2c,0xc2,0xc9,0xa2,0x12,0xb7,0xa9,0xa9,0x60,0xd6,0x4c,0x5c,0xa6,0x2a,0x4d,0x24,0xc2,0x55,0x99,0xaa,0x57,0x16,0x37,0x25,0x65,0x69,0xca,0x59,0xd4,0x63,0xb7,0xa5,0xab,0x10,0x56,0x77,0x94,0xb6,0x6e,0x43,0x54,0x4d,0x0e,0xa4,0x6d,0xb8,0x08,0xb7,0x70,0x4c,0x80,0x28,0xcc,0x00,0x00,0x1e',
};

export function initTalkiePlayer(container: HTMLElement): void {
  const audioContext = new AudioContext();
  let currentSource: AudioBufferSourceNode | null = null;
  let isPlaying = false;

  container.innerHTML = `
    <div class="talkie-player">
      <div class="section">
        <h2>Talkie Speech Synthesis</h2>
        <p class="section-description">
          Paste LPC-encoded hex data from the Talkie library and play it back.
          This uses the TMS5220/TMS5100 speech synthesis algorithm.
        </p>
      </div>

      <div class="section">
        <h3>Sample Phrases</h3>
        <div class="sample-buttons">
          ${Object.keys(SAMPLE_PHRASES)
            .map((name) => `<button class="sample-btn" data-phrase="${name}">${name}</button>`)
            .join('')}
        </div>
      </div>

      <div class="section">
        <h3>Hex Data Input</h3>
        <textarea
          id="hex-input"
          class="hex-input"
          placeholder="Paste hex data here (e.g., 0x41,0x89,0xaa,0x32...)"
          rows="8"
        ></textarea>
      </div>

      <div class="controls">
        <button id="play-btn" class="play-btn">
          <span class="btn-icon">▶</span>
          <span class="btn-label">Play</span>
        </button>
        <button id="stop-btn" class="stop-btn" disabled>
          <span class="btn-icon">■</span>
          <span class="btn-label">Stop</span>
        </button>
        <select id="device-select" class="device-select">
          <option value="0">TMS5220 (TI-99/4A)</option>
          <option value="1">TMS5100 (Speak & Spell)</option>
        </select>
      </div>

      <div class="section">
        <h3>Waveform Preview</h3>
        <div class="waveform-container">
          <canvas id="waveform-canvas" class="waveform-canvas"></canvas>
          <div id="waveform-loading" class="waveform-loading hidden">
            <div class="spinner"></div>
            <div class="loading-text">Generating waveform...</div>
          </div>
        </div>
      </div>

      <div id="status" class="status"></div>
    </div>
  `;

  const hexInput = container.querySelector<HTMLTextAreaElement>('#hex-input')!;
  const playBtn = container.querySelector<HTMLButtonElement>('#play-btn')!;
  const stopBtn = container.querySelector<HTMLButtonElement>('#stop-btn')!;
  const deviceSelect = container.querySelector<HTMLSelectElement>('#device-select')!;
  const canvas = container.querySelector<HTMLCanvasElement>('#waveform-canvas')!;
  const statusDiv = container.querySelector<HTMLDivElement>('#status')!;
  const loadingDiv = container.querySelector<HTMLDivElement>('#waveform-loading')!;
  const sampleButtons = container.querySelectorAll<HTMLButtonElement>('.sample-btn');

  const ctx = canvas.getContext('2d')!;

  function showLoading(): void {
    loadingDiv.classList.remove('hidden');
  }

  function hideLoading(): void {
    loadingDiv.classList.add('hidden');
  }

  // Clear the canvas to blank state
  function clearCanvas(): void {
    const displayWidth = canvas.clientWidth;
    const displayHeight = canvas.clientHeight;
    const dpr = window.devicePixelRatio || 1;
    canvas.width = displayWidth * dpr;
    canvas.height = displayHeight * dpr;
    ctx.scale(dpr, dpr);
    ctx.fillStyle = '#1a1a2e';
    ctx.fillRect(0, 0, displayWidth, displayHeight);
  }

  // Generate waveform preview from hex data
  function generateWaveformPreview(): void {
    const hexString = hexInput.value.trim();
    if (!hexString) {
      clearCanvas();
      hideLoading();
      return;
    }

    const hexData = parseHexString(hexString);
    if (!hexData) {
      clearCanvas();
      hideLoading();
      showStatus('Invalid hex data format', 'error');
      return;
    }

    showLoading();

    // Use setTimeout to allow the loading spinner to render
    setTimeout(() => {
      try {
        const device = parseInt(deviceSelect.value) as TalkieDeviceType;
        const stream = new TalkieStream();
        stream.say(hexData, device);
        const samples = stream.generateAllSamples();

        hideLoading();

        if (samples.length === 0) {
          clearCanvas();
          showStatus('No audio generated. Try switching device type (TMS5220 ↔ TMS5100)', 'error');
          return;
        }

        // Check if the audio seems too short (likely wrong device type)
        const durationSeconds = samples.length / stream.getSampleRate();
        if (durationSeconds < 0.1) {
          clearCanvas();
          showStatus('Audio too short. Try switching device type (TMS5220 ↔ TMS5100)', 'error');
          return;
        }

        drawWaveform(samples);
      } catch (error) {
        console.error('Waveform generation error:', error);
        hideLoading();
        clearCanvas();
        showStatus(
          'Error generating waveform. Try switching device type (TMS5220 ↔ TMS5100)',
          'error'
        );
      }
    }, 10);
  }

  // Debounce function for input changes
  let waveformDebounceTimer: number | undefined;
  function debounceWaveformUpdate(): void {
    if (waveformDebounceTimer) {
      window.clearTimeout(waveformDebounceTimer);
    }
    waveformDebounceTimer = window.setTimeout(() => {
      generateWaveformPreview();
    }, 500);
  }

  // Sample phrase buttons
  sampleButtons.forEach((btn) => {
    btn.addEventListener('click', () => {
      const phraseName = btn.dataset.phrase!;
      hexInput.value = SAMPLE_PHRASES[phraseName as keyof typeof SAMPLE_PHRASES];
      showStatus(`Loaded: ${phraseName}`, 'info');
      generateWaveformPreview();
    });
  });

  // Update waveform when hex input changes
  hexInput.addEventListener('input', debounceWaveformUpdate);

  // Update waveform when device selection changes
  deviceSelect.addEventListener('change', () => {
    if (hexInput.value.trim()) {
      generateWaveformPreview();
    }
  });

  function showStatus(message: string, type: 'info' | 'error' | 'success'): void {
    statusDiv.textContent = message;
    statusDiv.className = `status ${type}`;
    setTimeout(() => {
      statusDiv.textContent = '';
      statusDiv.className = 'status';
    }, 3000);
  }

  function drawWaveform(audioData: Float32Array): void {
    // Get the display size from the canvas element
    const displayWidth = canvas.clientWidth;
    const displayHeight = canvas.clientHeight;

    // Set the canvas resolution to match the display size with device pixel ratio
    const dpr = window.devicePixelRatio || 1;
    canvas.width = displayWidth * dpr;
    canvas.height = displayHeight * dpr;

    // Scale the context to account for device pixel ratio
    // Note: setting canvas.width resets the context, so we need to scale every time
    ctx.scale(dpr, dpr);

    ctx.clearRect(0, 0, displayWidth, displayHeight);

    // Draw background
    ctx.fillStyle = '#1a1a2e';
    ctx.fillRect(0, 0, displayWidth, displayHeight);

    // Draw waveform
    ctx.strokeStyle = '#00ff88';
    ctx.lineWidth = 1.5;
    ctx.beginPath();

    const step = Math.ceil(audioData.length / displayWidth);
    const amp = displayHeight / 2;

    for (let i = 0; i < displayWidth; i++) {
      const startIdx = i * step;
      const endIdx = Math.min((i + 1) * step, audioData.length);
      const slice = audioData.slice(startIdx, endIdx);

      if (slice.length === 0) continue;

      const min = Math.min(...Array.from(slice));
      const max = Math.max(...Array.from(slice));

      if (i === 0) {
        ctx.moveTo(i, amp - min * amp);
      }
      ctx.lineTo(i, amp - max * amp);
      ctx.lineTo(i, amp - min * amp);
    }

    ctx.stroke();

    // Draw center line
    ctx.strokeStyle = '#444';
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(0, amp);
    ctx.lineTo(displayWidth, amp);
    ctx.stroke();
  }

  function stopPlayback(): void {
    if (currentSource) {
      try {
        currentSource.stop();
      } catch {
        // Already stopped
      }
      currentSource = null;
    }
    isPlaying = false;
    playBtn.disabled = false;
    stopBtn.disabled = true;
    playBtn.querySelector('.btn-label')!.textContent = 'Play';
  }

  async function playPhrase(): Promise<void> {
    if (isPlaying) {
      return;
    }

    const hexString = hexInput.value.trim();
    if (!hexString) {
      showStatus('Please paste hex data first', 'error');
      return;
    }

    const hexData = parseHexString(hexString);
    if (!hexData) {
      showStatus('Invalid hex data format', 'error');
      return;
    }

    try {
      // Resume audio context if needed (browser autoplay policy)
      if (audioContext.state === 'suspended') {
        await audioContext.resume();
      }

      const device = parseInt(deviceSelect.value) as TalkieDeviceType;
      const stream = new TalkieStream();
      stream.say(hexData, device);

      // Generate all samples
      const samples = stream.generateAllSamples();

      if (samples.length === 0) {
        showStatus('No audio generated. Try switching device type (TMS5220 ↔ TMS5100)', 'error');
        return;
      }

      // Check if the audio seems too short (likely wrong device type)
      const durationSeconds = samples.length / stream.getSampleRate();
      if (durationSeconds < 0.1) {
        showStatus('Audio too short. Try switching device type (TMS5220 ↔ TMS5100)', 'error');
        return;
      }

      // Draw waveform
      drawWaveform(samples);

      // Create audio buffer
      const audioBuffer = audioContext.createBuffer(1, samples.length, stream.getSampleRate());
      // Create a new Float32Array with the correct buffer type for copyToChannel
      const channelData = new Float32Array(samples);
      audioBuffer.copyToChannel(channelData, 0);

      // Play audio
      currentSource = audioContext.createBufferSource();
      currentSource.buffer = audioBuffer;
      currentSource.connect(audioContext.destination);

      currentSource.onended = () => {
        stopPlayback();
        showStatus('Playback complete', 'success');
      };

      currentSource.start(0);
      isPlaying = true;
      playBtn.disabled = true;
      stopBtn.disabled = false;
      playBtn.querySelector('.btn-label')!.textContent = 'Playing...';

      showStatus(`Playing (${durationSeconds.toFixed(1)}s, ${samples.length} samples)`, 'info');
    } catch (error) {
      console.error('Playback error:', error);
      showStatus('Playback error. Try switching device type (TMS5220 ↔ TMS5100)', 'error');
      stopPlayback();
    }
  }

  playBtn.addEventListener('click', () => {
    void playPhrase();
  });
  stopBtn.addEventListener('click', stopPlayback);
}
